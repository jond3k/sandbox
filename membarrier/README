membarrier - A memory write barrier demonstration
Jon Davey, 2011
=================================================

Using the virtual memory systems of modern PCs you can selectively lock data.

Why?
====

The first time I came across this idea was when I studied garbage collection techniques. If you're scanning an object graph to find what can be safely reclaimed by the system it's important that the object graph doesn't change. One way to do this in a multithreaded application is to "stop the world" by suspending every thread by sending it a signal and waiting on a semaphore before continuing. Nice idea, but sadly it doesn't scale very well. Memory barriers are a great alternative in this situation as they allow you to suspend only processes that need to be suspended. The technique will no doubt be useful in other situations where parallelism needs to be increased and using conventional multhreading primitives is not an option.

How?
====

Using mprotect you can alter the protection level of a memory segment. Any resulting SIGSEGV signals can be caught and the thread in question can be made to wait by using a semaphore. When you want to release the lock the protection level is returned to its original value and the threads are released by posting to the semaphore. The need to maintain async-thread-safety adds to the challenge.

Overview
========

barrier     : The interface to the module. It will allow you to create, activate and deactivate a memory lock
barrierlist : An internal data structure that lists memory barriers. It can try to match an address to one of these barriers
main        : A sample application that creates many threads whose sole purpose is to increment a counter.
segvhandler : This handles the segmentation faults and configures the signal handler

To run
======

make && ./membarrier

